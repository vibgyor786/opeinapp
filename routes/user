const express = require("express");
const app = express();
const router = express.Router();

// <-----------------------schema for user------------------------->
const user = require("../schemas/userSchema");

// <-----------------------schema for task------------------------->
const task = require("../schemas/task");

// <-----------------------schema for sub task------------------------->
const subtask = require("../schemas/subTask");

const { jwtDecode } = require("jwt-decode");

// <-----------------------save user route------------------------->
router.post("/saveUser", async (req, res) => {
  const sampleUser = req.body;
  try {
    // <-----------------------checking user exists or not------------------------->
    const alreadysaveddata = await user.find({ phoneNumber: req.body.phoneNo });

    if (alreadysaveddata.length != 0) {
      res.status(200).send({
        Error: "Phone number already exits",
      });
      return;
    }

    // <-----------------------if user does not exists then save the data------------------------->
    const newUser = new user({
      phoneNumber: req.body.phoneNo,
    });

    const data = await newUser.save();
    res.send(data);
  } catch (e) {
    res.status(200).send({
      Error: e,
    });
  }
});

// <-----------------------get all user task------------------------->
router.get("/getusertask", async (req, res) => {
  // <-----------------------token is present in the body or not------------------------->
  if (req.body.token == null) {
    res.status(200).send({
      Error: "token is not available",
    });
  }

  try {
    // <-----------------------jwt decoding------------------------->
    const sampleTask = req.body.token;
    const decodedid = jwtDecode(sampleTask);

    let data;

    // <-----------------------filter ------------------------->
    if (req.body.filter == "priority") {
      data = await task
        .find({
          userId: decodedid.id,
          isdeleted: false,
        })
        .sort({ priority: 1 })
        .limit(req.body.limit);
    } else if (req.body.filter == "date") {
      data = await task
        .find({
          userId: decodedid.id,
          isdeleted: false,
        })
        .sort({ dueDate: 1 })
        .limit(req.body.limit);
    } else {
      data = await task
        .find({
          userId: decodedid.id,
          isdeleted: false,
        })
        .limit(req.body.limit);
    }

    res.status(200).send(data);
  } catch (e) {
    res.status(200).send({
      Error: e,
    });
  }
});
router.get("/getsubtask", async (req, res) => {
  // <-----------------------task id is present in body------------------------->
  if (req.body.taskId == null) {
    res.status(200).send({
      Error: "Task Id is missing",
    });
  }

  try {
    // <-----------------------finding the subtask which is not deleted------------------------->
    const data = await subtask.find({
      taskId: req.body.taskId,
      isdeleted: false,
    });

    res.status(200).send(data);
  } catch (e) {
    res.status(200).send({
      Error: e,
    });
  }
});
module.exports = router;
